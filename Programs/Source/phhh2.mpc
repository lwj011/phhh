program.use_edabit(True)
program.use_trunc_pr = True
program.use_split(3)
from Compiler import types,library, instructions
from Compiler.types import Array, sint, cint
from Compiler.phhh1 import radix_sort, phhh_1, phhh_2, phhh_0, generate_zipf_distribution
from Compiler.GC.types import sbitvec
from Compiler.instructions import time, crash
#from  Compiler.sorting import radix_sort

#this is the test file of private hierarchical heavy hittters for accuracy, including basicHHH(PHHH0), PHHH-1, PHHH-2.



print_ln('-------------------------basic accuracy testing starts------------------------------------')
#t is 3
a = sint.Array(17)
a.assign([6,1,5,4,7,7,7,0,5,2,4,4,5,0,2,4,6])
t = sint(3)
print_ln('the input data is:')
a.print_reveal_nested(end='\n')
#phhh_0(a,3,t)
#phhh_1(a,3,t)
phhh_2(a,3,t)
print_ln('-----basic testing end, 3 layers, 17 items, time30 phhh0, time10 phhh1, time20 phhh2-----')






print_ln('-------------------------big layers accuracy testing starts------------------------------------')
#t is 3
a = sint.Array(17)
a.assign([60000,12345,50001,41011,71,71,71,0,50001,27777,41011,41011,50001,0,27777,41011,60000])
t = sint(3)
print_ln('the input data is:')
a.print_reveal_nested(end='\n')
#phhh_0(a,16,t)
#phhh_1(a,16,t)
phhh_2(a,16,t)
print_ln('-----layers testing end, 16 layers, 17 items-----')




print_ln('-------------------------no hhh accuracy testing starts------------------------------------')
#t is 3
a = sint.Array(5)
a.assign([6,1,2,4,7])
t = sint(4)
print_ln('the input data is:')
a.print_reveal_nested(end='\n')
#phhh_0(a,3,t)
#phhh_1(a,3,t)
#phhh_2(a,3,t)
print_ln('-----no hhh testing end-----')




print_ln('-------------------------random accuracy testing starts------------------------------------')
n_bits = 64
num = 10
t = sint(2)

zipf_data = generate_zipf_distribution(n_bits, num, 1.03)
a = sint.Array(num)
a.assign(zipf_data)
#phhh_0(a,n_bits,t)
#phhh_1(a,n_bits,t)
#phhh_2(a,n_bits, t)
print_ln('-----random testing end-----')